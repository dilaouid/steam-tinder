/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LibraryImport } from './routes/library'
import { Route as IndexImport } from './routes/index'
import { Route as SteamderSteamderIdImport } from './routes/steamder/$steamderId'

// Create Virtual Routes

const SteamdersLazyImport = createFileRoute('/steamders')()
const LoginLazyImport = createFileRoute('/login')()
const LegalsLazyImport = createFileRoute('/legals')()
const CguLazyImport = createFileRoute('/cgu')()

// Create/Update Routes

const SteamdersLazyRoute = SteamdersLazyImport.update({
  path: '/steamders',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/steamders.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const LegalsLazyRoute = LegalsLazyImport.update({
  path: '/legals',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/legals.lazy').then((d) => d.Route))

const CguLazyRoute = CguLazyImport.update({
  path: '/cgu',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cgu.lazy').then((d) => d.Route))

const LibraryRoute = LibraryImport.update({
  path: '/library',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SteamderSteamderIdRoute = SteamderSteamderIdImport.update({
  path: '/steamder/$steamderId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/cgu': {
      id: '/cgu'
      path: '/cgu'
      fullPath: '/cgu'
      preLoaderRoute: typeof CguLazyImport
      parentRoute: typeof rootRoute
    }
    '/legals': {
      id: '/legals'
      path: '/legals'
      fullPath: '/legals'
      preLoaderRoute: typeof LegalsLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/steamders': {
      id: '/steamders'
      path: '/steamders'
      fullPath: '/steamders'
      preLoaderRoute: typeof SteamdersLazyImport
      parentRoute: typeof rootRoute
    }
    '/steamder/$steamderId': {
      id: '/steamder/$steamderId'
      path: '/steamder/$steamderId'
      fullPath: '/steamder/$steamderId'
      preLoaderRoute: typeof SteamderSteamderIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/library': typeof LibraryRoute
  '/cgu': typeof CguLazyRoute
  '/legals': typeof LegalsLazyRoute
  '/login': typeof LoginLazyRoute
  '/steamders': typeof SteamdersLazyRoute
  '/steamder/$steamderId': typeof SteamderSteamderIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/library': typeof LibraryRoute
  '/cgu': typeof CguLazyRoute
  '/legals': typeof LegalsLazyRoute
  '/login': typeof LoginLazyRoute
  '/steamders': typeof SteamdersLazyRoute
  '/steamder/$steamderId': typeof SteamderSteamderIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/library': typeof LibraryRoute
  '/cgu': typeof CguLazyRoute
  '/legals': typeof LegalsLazyRoute
  '/login': typeof LoginLazyRoute
  '/steamders': typeof SteamdersLazyRoute
  '/steamder/$steamderId': typeof SteamderSteamderIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/library'
    | '/cgu'
    | '/legals'
    | '/login'
    | '/steamders'
    | '/steamder/$steamderId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/library'
    | '/cgu'
    | '/legals'
    | '/login'
    | '/steamders'
    | '/steamder/$steamderId'
  id:
    | '__root__'
    | '/'
    | '/library'
    | '/cgu'
    | '/legals'
    | '/login'
    | '/steamders'
    | '/steamder/$steamderId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LibraryRoute: typeof LibraryRoute
  CguLazyRoute: typeof CguLazyRoute
  LegalsLazyRoute: typeof LegalsLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  SteamdersLazyRoute: typeof SteamdersLazyRoute
  SteamderSteamderIdRoute: typeof SteamderSteamderIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LibraryRoute: LibraryRoute,
  CguLazyRoute: CguLazyRoute,
  LegalsLazyRoute: LegalsLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  SteamdersLazyRoute: SteamdersLazyRoute,
  SteamderSteamderIdRoute: SteamderSteamderIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/library",
        "/cgu",
        "/legals",
        "/login",
        "/steamders",
        "/steamder/$steamderId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/cgu": {
      "filePath": "cgu.lazy.tsx"
    },
    "/legals": {
      "filePath": "legals.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/steamders": {
      "filePath": "steamders.lazy.tsx"
    },
    "/steamder/$steamderId": {
      "filePath": "steamder/$steamderId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
